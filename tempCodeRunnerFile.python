import pygame
from random import randint

pygame.init()

screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))  # Set up screen bounds

x = randint(50, 750)  # Randomly spawn instances of Enemy
y = randint(50, 550)  # Randomly spawn instances of Enemy

class Enemy:
    def __init__(self, x, y):
        self.hp = 100
        self.original_image = self.image = pygame.image.load("ship_little.png")
        self.rect = self.image.get_rect(topleft=(x, y))
        self.veloY = 1
        self.veloX = 1
        self.screen_width, self.screen_height = screen_width, screen_height

    def rotate(self, angle):
        self.image = pygame.transform.rotate(self.original_image, angle)
        self.rect = self.image.get_rect(center=self.rect.center)

    def movement(self):
        mouse_position = pygame.mouse.get_pos()
        direction = pygame.math.Vector2(mouse_position[0] - self.rect.centerx, mouse_position[1] - self.rect.centery)
        self.rotate(direction.angle_to(pygame.math.Vector2(1, 0)))

        self.rect.x += self.veloX
        self.rect.y += self.veloY

        if not 0 <= self.rect.x <= self.screen_width - self.rect.width:
            self.veloX = -self.veloX
        if not 0 <= self.rect.y <= self.screen_height - self.rect.height:
            self.veloY = -self.veloY

    def draw(self, screen):
        screen.blit(self.image, self.rect.topleft)

class Bullet:
    def __init__(self, bx, by):
        self.bx = bx
        self.by = by

    def bullet_vector(self, target_x, target_y):
        diff_x = target_x - self.bx
        diff_y = target_y - self.by

        self.bx += diff_x / 30
        self.by += diff_y / 30

        pygame.draw.circle(screen, (255, 0, 0), (int(self.bx), int(self.by)), 5)

evils = [Enemy(x, y),
         Enemy(randint(50, 750), randint(50, 550)),
         Enemy(randint(50, 750), randint(50, 550))]

bullet_list = []
clock = pygame.time.Clock()  # Set FPS
running = True

while running:  # Mimicking the game cycle
    for event in pygame.event.get():
        if event.type == pygame.QUIT:  # Quit if clicked on X
            running = False
            pygame.quit()

    screen.fill((0, 0, 0))  # Wipe the screen

    if pygame.time.get_ticks() % 60 == 0:
        for enemy in evils:
            b1 = Bullet(enemy.rect.x, enemy.rect.y)
            bullet_list.append(b1)

    for bullet in bullet_list:
        for enemy in evils:
            bullet.bullet_vector(enemy.rect.x, enemy.rect.y)

    for enemy in evils:
        enemy.movement()  # Call movement
        enemy.draw(screen)  # Draw new xy

    pygame.display.flip()
    clock.tick(60)
